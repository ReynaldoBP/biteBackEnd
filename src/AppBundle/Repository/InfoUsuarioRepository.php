<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * InfoUsuarioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InfoUsuarioRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Documentación para la función 'getUsuariosCriterio'
     * Método encargado de retornar todos los usuarios según los parámetros recibidos.
     * 
     * @author Kevin Baque
     * @version 1.0 16-07-2019
     * 
     * @return array  $arrayUsuarios
     * 
     */    
    public function getUsuariosCriterio($arrayParametros)
    {
        $strTipoRol         = $arrayParametros['strTipoRol'] ? $arrayParametros['strTipoRol']:'';
        $strIdentificacion  = $arrayParametros['strIdentificacion'] ? $arrayParametros['strIdentificacion']:'';
        $strNombres         = $arrayParametros['strNombres'] ? $arrayParametros['strNombres']:'';
        $strApellidos       = $arrayParametros['strApellidos'] ? $arrayParametros['strApellidos']:'';
        $strEstado          = $arrayParametros['strEstado'] ? $arrayParametros['strEstado']:'Activo';
        $arrayUsuarios      = array();
        $strMensajeError    = '';
        $objRsmBuilder      = new ResultSetMappingBuilder($this->_em);
        $objQuery           = $this->_em->createNativeQuery(null, $objRsmBuilder);
        $objRsmBuilderCount = new ResultSetMappingBuilder($this->_em);
        $objQueryCount      = $this->_em->createNativeQuery(null, $objRsmBuilderCount);
        try
        {
            $strSelect      = "SELECT IU.ID_USUARIO,IU.NOMBRES,IU.APELLIDOS, IU.IDENTIFICACION, IU.CORREO,IU.TIPO_ROL_ID,
                               IU.ESTADO,IU.PAIS,IU.CIUDAD,IU.USR_CREACION,IU.FE_CREACION,IU.USR_MODIFICACION,IU.FE_MODIFICACION ";
            $strSelectCount = "SELECT COUNT(*) AS CANTIDAD ";
            $strFrom        = "FROM INFO_USUARIO IU ";
            $strWhere       = "WHERE lower(IU.ESTADO)=lower(:ESTADO) ";
            $objQuery->setParameter("ESTADO", $strEstado);
            $objQueryCount->setParameter("ESTADO", $strEstado);
            if(!empty($strNombres))
            {
                $strWhere .= " AND lower(IU.NOMBRES) like lower(:NOMBRES)";
                $objQuery->setParameter("NOMBRES", '%' . trim($strNombres) . '%');
                $objQueryCount->setParameter("NOMBRES", '%' . trim($strNombres) . '%');
            }
            if(!empty($strApellidos))
            {
                $strWhere .= " AND lower(IU.APELLIDOS) like lower(:APELLIDOS)";
                $objQuery->setParameter("APELLIDOS", '%' . trim($strApellidos) . '%');
                $objQueryCount->setParameter("APELLIDOS", '%' . trim($strApellidos) . '%');
            }
            if(!empty($strIdentificacion))
            {
                $strWhere .= " AND IU.IDENTIFICACION =:IDENTIFICACION";
                $objQuery->setParameter("IDENTIFICACION", $strIdentificacion);
                $objQueryCount->setParameter("IDENTIFICACION", $strIdentificacion);
            }
            if(!empty($strTipoRol))
            {
                $strSelect .= " , ATR.DESCRIPCION_TIPO_ROL ";
                $strFrom   .= " , ADMI_TIPO_ROL ATR ";
                $strWhere  .= " AND IU.TIPO_ROL_ID=ATR.ID_TIPO_ROL
                                AND ATR.DESCRIPCION_TIPO_ROL = :DESCRIPCION_TIPO_ROL";
                $objQuery->setParameter("DESCRIPCION_TIPO_ROL", $strTipoRol);
                $objQueryCount->setParameter("DESCRIPCION_TIPO_ROL", $strTipoRol);
                $objRsmBuilder->addScalarResult('DESCRIPCION_TIPO_ROL', 'DESCRIPCION_TIPO_ROL', 'string');
            }
            $objRsmBuilder->addScalarResult('ID_USUARIO', 'ID_USUARIO', 'string');
            $objRsmBuilder->addScalarResult('NOMBRES', 'NOMBRES', 'string');
            $objRsmBuilder->addScalarResult('APELLIDOS', 'APELLIDOS', 'string');
            $objRsmBuilder->addScalarResult('IDENTIFICACION', 'IDENTIFICACION', 'string');
            $objRsmBuilder->addScalarResult('CORREO', 'CORREO', 'string');
            $objRsmBuilder->addScalarResult('TIPO_ROL_ID', 'TIPO_ROL_ID', 'string');
            $objRsmBuilder->addScalarResult('ESTADO', 'ESTADO', 'string');
            $objRsmBuilder->addScalarResult('PAIS', 'PAIS', 'string');
            $objRsmBuilder->addScalarResult('CIUDAD', 'CIUDAD', 'string');
            $objRsmBuilder->addScalarResult('USR_CREACION', 'USR_CREACION', 'string');
            $objRsmBuilder->addScalarResult('FE_CREACION', 'FE_CREACION', 'date');
            $objRsmBuilder->addScalarResult('USR_MODIFICACION', 'USR_MODIFICACION', 'string');
            $objRsmBuilder->addScalarResult('FE_MODIFICACION', 'FE_MODIFICACION', 'date');
            $objRsmBuilderCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer');
            $strSql       = $strSelect.$strFrom.$strWhere;
            $objQuery->setSQL($strSql);
            $strSqlCount  = $strSelectCount.$strFrom.$strWhere;
            $objQueryCount->setSQL($strSqlCount);
            $arrayUsuarios['cantidad']   = $objQueryCount->getSingleScalarResult();
            $arrayUsuarios['resultados'] = $objQuery->getResult();
        }
        catch(\Exception $e)
        {
            $strMensajeError = $ex->getMessage();
        }
        $arrayUsuarios['error'] = $strMensajeError;
        return $arrayUsuarios;
    }
}
